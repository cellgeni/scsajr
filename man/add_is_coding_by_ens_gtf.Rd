% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/scsajr.R
\name{add_is_coding_by_ens_gtf}
\alias{add_is_coding_by_ens_gtf}
\title{Annotate coding status of segments using a GTF file}
\usage{
add_is_coding_by_ens_gtf(gtf_path, as_list)
}
\arguments{
\item{gtf_path}{Character: path to an Ensembl GTF file
(tab‐delimited, with columns: \code{chr_id}, \code{feature} (e.g., "CDS"), \code{start}, \code{stop}, \code{strand}, and gene metadata).
Must be readable by \code{read.table(..., comment.char = "#")}.}

\item{as_list}{SAJR::loadSAData() output list containing segment coordinates.
List containing at least these components:
\describe{
\item{\code{seg}}{A data.frame with columns \code{chr_id}, \code{start}, \code{stop}, \code{strand}, and \code{gene_id} for each segment. Row names are segment IDs.}
}}
}
\value{
The input \code{as_list} with additional columns:
\describe{
\item{\code{seg$cod}}{Character vector of length ∣segments∣.
Each element is \code{'c'} if the segment is completely within a CDS, \code{'p'} if partially overlaps, or \code{'n'} if no overlap.}
\item{\code{seg$cod.gene}}{Logical vector of length ∣segments∣. \code{TRUE} if the segment’s gene contains at least one segment with \code{cod != 'n'}.}
}
The modified \code{as_list} is returned invisibly.
}
\description{
Given a path to an Ensembl GTF (gene annotation) and an AS result list containing segment coordinates,
this function determines whether each segment overlaps coding sequence (CDS) regions.
It assigns coding status:
\itemize{
\item 'c' if the segment is fully contained within a CDS (i.e., likely constitutive exon),
\item 'p' if the segment partially overlaps a CDS,
\item 'n' if the segment does not overlap any CDS.
It also flags whether the segment’s gene has at least one coding overlap.
}
}
\details{
\enumerate{
\item Read the GTF file via \code{read.table(gtf_path, sep = "\t", header = FALSE, comment.char = "#")} and
filter to rows where the second column (\code{feature}) == "CDS".
Keep columns: \code{chr_id}, \code{start}, \code{stop}, \code{strand}.
\item Force CDS entries to a \code{GRanges} using \code{GenomicRanges::GRanges()}.
\itemize{
\item If some \code{chr_id} values lack the "chr" prefix but segments use it (or vice versa), prefix or strip "chr" to match.
}
\item Reduce the CDS ranges per chromosome/strand to merge overlapping exons (via \code{reduce()}).
\item Build a \code{GRanges} for all segments from \code{as_list$seg}, using \code{chr_id}, \code{start}, \code{stop}, and \code{strand}.
\item Use \code{findOverlaps(seg_gr, cds_gr, type = "any")} to find any overlap, and \code{findOverlaps(seg_gr, cds_gr, type = "within")} to find full containment.
\item Initialize \code{cod = 'n'} for all segments. For indices in the "any" overlap set, set \code{cod = 'p'}. For indices in the "within" set, set \code{cod = 'c'}.
\item Determine \code{cod.gene} by marking as \code{TRUE} any segment whose \code{gene_id} appears among those with \code{cod != 'n'}.
}
}
\note{
\itemize{
\item Requires \code{GenomicRanges} for \code{GRanges}, \code{reduce()}, and \code{findOverlaps()}.
\item Uses \code{IRanges::IRanges()} internally for range construction.
\item If chromosome naming mismatches occur ("chr1" vs. "1"), this function attempts to harmonize by adding "chr" prefix where needed.
}
}
\seealso{
\code{\link[GenomicRanges]{GRanges}}, \code{\link[GenomicRanges]{findOverlaps}}, \code{\link[GenomicRanges]{reduce}}
}
