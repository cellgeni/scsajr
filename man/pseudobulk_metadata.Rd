% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/scsajr.R
\name{pseudobulk_metadata}
\alias{pseudobulk_metadata}
\title{Aggregate column‐level metadata for pseudobulk groups}
\usage{
pseudobulk_metadata(meta, groupby, aggregate = list(ncells = sum))
}
\arguments{
\item{meta}{A data.frame whose rows correspond to individual cells or samples,
and whose columns contain metadata (e.g., \code{sample_id}, \code{celltype}, \code{ncells}, etc.).
Row names should match column names of the corresponding \code{SummarizedExperiment} if applicable.}

\item{groupby}{Either:
\itemize{
\item A character vector of length \code{nrow(meta)} giving a grouping label for each row of \code{meta}, or
\item One or more column names in \code{meta}. In that case, the values of those columns are pasted (row‐wise)
with the default delimiter to form a grouping factor via \code{get_groupby_factor()}.
}
After grouping, columns with the same label will be summed together.
See \code{get_groupby_factor()} for details on how the grouping vector is constructed.}

\item{aggregate}{A named list of functions to apply to each column within each group.
For example, \code{list(ncells = sum, ngenes = max)} would sum the \code{ncells} column and take
the maximum of the \code{ngenes} column for each group. Default is \code{list(ncells = sum)}.}
}
\value{
A data.frame with one row per unique group. Columns include:
\itemize{
\item Any original columns in \code{meta} that had the same (constant) value for all rows in that group.
\item For each name in \code{aggregate}, a new column where the corresponding function has been applied
to that column’s values within each group.
Row names of the returned data.frame are the group labels.
}
}
\description{
Given a data.frame of per‐cell metadata and a grouping vector, this function aggregates metadata so that each row corresponds to one group.
For each group:
\enumerate{
\item Columns that are constant within the group are retained.
\item For any column listed in \code{aggregate}, a summary function is applied (e.g., sum).
}
}
\examples{
\dontrun{
# Suppose 'cell_meta' is a data.frame of 1000 cells with columns:
#   sample_id, celltype, ncells, batch, library_size
# We want to pseudobulk by 'celltype', summing 'ncells' and taking max 'library_size':
group_meta <- pseudobulk_metadata(
  meta = cell_meta,
  groupby = "celltype",
  aggregate = list(ncells = sum, library_size = max)
)
# 'group_meta' now has one row per unique celltype.
}

}
\seealso{
\code{\link{pseudobulk}}, \code{\link{get_groupby_factor}}
}
